import 'dart:async';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:get/get.dart';
import 'package:get/get_core/src/get_main.dart';
import 'package:get/get_rx/src/rx_types/rx_types.dart';
import 'package:get/get_state_manager/src/simple/get_controllers.dart';

import '../config/config.dart';
import '../models/Post.model.dart';


class PostController extends GetxController {
  static PostController instance = Get.find();
  RxBool hasData = false.obs;
  RxBool hasLocationAdded = true.obs;
  List<Post> posts = [];
  late StreamSubscription<QuerySnapshot> _subscription;

  @override
  void onInit() {
    super.onInit();
    _subscribeToFirestoreStream();
  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
    _subscription.cancel();
  }

  void _subscribeToFirestoreStream() {
    hasData.value = false;

    _subscription = postRef.snapshots().listen((QuerySnapshot snapshot) {
      hasData.value = false;
      posts = [];
      if (snapshot.docs.isEmpty) {
        hasData.value = true;
        return;
      }
      for (var element in snapshot.docs) {
        posts.add(Post.fromJson(element.data() as Map<String, dynamic>));
      }
      print(posts.length);
      hasData.value = true;
    });
  }

  addNewCategory(Post category) async {
    DocumentReference documentReference = postRef.doc();

    // Get the auto-generated document ID
    String autoGeneratedID = documentReference.id;

    category.postID = autoGeneratedID;

    await documentReference.set(category.toJson());
  }


  Future<List<String>> uploadImages(List<File> images) async {
    if (images.isEmpty) return [];

    List<String> downloadUrls = [];

    await Future.forEach(images, (image) async {
      Reference ref = FirebaseStorage.instance
          .ref()
          .child('posts')
          .child(image.path.split("/").last);
      final UploadTask uploadTask = ref.putFile(image);
      final TaskSnapshot taskSnapshot = await uploadTask.whenComplete(() {});
      final url = await taskSnapshot.ref.getDownloadURL();
      downloadUrls.add(url);
    });
    return downloadUrls;
  }


  /*Category getCategoryById(String categoryID){
    return category.where((element) => element.categoryID == categoryID).first;
  }

  editCategory(Category category, String categoryID) async {
    await categoryRef.doc(categoryID).set(category, SetOptions(merge: true));
  }

  deleteCategory(String categoryID) async {
    await categoryRef.doc(categoryID).delete();
  }*/
}
