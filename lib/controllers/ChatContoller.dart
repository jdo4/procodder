import 'dart:async';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:get/get.dart';
import 'package:get/get_core/src/get_main.dart';
import 'package:get/get_rx/src/rx_types/rx_types.dart';
import 'package:get/get_state_manager/src/simple/get_controllers.dart';

import '../config/config.dart';
import '../models/Chat.model.dart';
import '../models/Post.model.dart';


class ChatController extends GetxController {
  static ChatController instance = Get.find();

  RxBool hasData = false.obs;

  List<ChatMessage> chatmsg = [];
  late StreamSubscription<DocumentSnapshot> _subscription;

  @override
  void onInit() {
    super.onInit();

  }

  @override
  void onClose() {
    // TODO: implement onClose
    super.onClose();
    _subscription.cancel();
  }

  void subscribeToFirestoreStream(String id) {
    hasData.value = false;

    _subscription = postRef.doc(id).snapshots().listen((DocumentSnapshot snapshot) {
      hasData.value = false;
      chatmsg = [];
      print(snapshot.data());
      hasData.value = true;
    });
  }

  newMassage(String id,ChatMessage ct) async {
    DocumentReference documentReference = postRef.doc(id);
    await documentReference.set(ct.toJson());
  }

  addNewCategory(Post category) async {
    DocumentReference documentReference = postRef.doc();

    // Get the auto-generated document ID
    String autoGeneratedID = documentReference.id;

    category.postID = autoGeneratedID;

    await documentReference.set(category.toJson());
  }


  Future<List<String>> uploadImages(List<File> images) async {
    if (images.isEmpty) return [];

    List<String> downloadUrls = [];

    await Future.forEach(images, (image) async {
      Reference ref = FirebaseStorage.instance
          .ref()
          .child('posts')
          .child(image.path.split("/").last);
      final UploadTask uploadTask = ref.putFile(image);
      final TaskSnapshot taskSnapshot = await uploadTask.whenComplete(() {});
      final url = await taskSnapshot.ref.getDownloadURL();
      downloadUrls.add(url);
    });
    return downloadUrls;
  }

}
